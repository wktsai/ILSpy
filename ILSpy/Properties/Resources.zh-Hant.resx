<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="About" xml:space="preserve">
    <value>關於</value>
  </data>
  <data name="AddPreconfiguredList" xml:space="preserve">
    <value>新增預先設置清單...</value>
  </data>
  <data name="AddShellIntegration" xml:space="preserve">
    <value>新增檔案資源管理器整合</value>
  </data>
  <data name="AddShellIntegrationMessage" xml:space="preserve">
    <value>這會在機碼表的「HKCU\Software\Classes\dllfile\shell\Open with ILSpy\command」與「HKCU\Software\Classes\exefile\shell\Open with ILSpy\command」中新增「{0}」。這樣在檔案總管中，.dll 檔案與 .exe 檔案可以在右鍵選單中使用 ILSpy 打開。

確定繼續？</value>
  </data>
  <data name="AllFiles" xml:space="preserve">
    <value>|所有檔案|*.*</value>
  </data>
  <data name="AllowMultipleInstances" xml:space="preserve">
    <value>允許多個視窗</value>
  </data>
  <data name="AlwaysBraces" xml:space="preserve">
    <value>始終使用大括號</value>
  </data>
  <data name="Analyze" xml:space="preserve">
    <value>分析</value>
  </data>
  <data name="Assemblies" xml:space="preserve">
    <value>類別庫清單</value>
  </data>
  <data name="Assembly" xml:space="preserve">
    <value>類別庫</value>
  </data>
  <data name="AssemblySaveCodeDirectoryNotEmpty" xml:space="preserve">
    <value>目錄非空。檔案會被覆蓋。
確定繼續？</value>
  </data>
  <data name="AssemblySaveCodeDirectoryNotEmptyTitle" xml:space="preserve">
    <value>專案目錄非空</value>
  </data>
  <data name="AutomaticallyCheckUpdatesEveryWeek" xml:space="preserve">
    <value>每週自動檢查更新</value>
  </data>
  <data name="Back" xml:space="preserve">
    <value>後退</value>
  </data>
  <data name="BaseTypes" xml:space="preserve">
    <value>基礎型別</value>
  </data>
  <data name="C_lone" xml:space="preserve">
    <value>複製個體(_L)</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>取消</value>
  </data>
  <data name="CannotAnalyzeMissingRef" xml:space="preserve">
    <value>無法解析實體。可能是由於缺少類別庫引用。請新增缺少的類別庫並重試。</value>
  </data>
  <data name="CannotCreatePDBFile" xml:space="preserve">
    <value>無法建立為{0}建立PDB檔案,因為它不包含PE除錯目錄型別 'CodeView'.</value>
  </data>
  <data name="CheckAgain" xml:space="preserve">
    <value>再次檢查</value>
  </data>
  <data name="CheckUpdates" xml:space="preserve">
    <value>檢查更新</value>
  </data>
  <data name="Checking" xml:space="preserve">
    <value>檢查...</value>
  </data>
  <data name="Close" xml:space="preserve">
    <value>關閉</value>
  </data>
  <data name="CollapseTreeNodes" xml:space="preserve">
    <value>摺疊所有樹節點</value>
  </data>
  <data name="Copy" xml:space="preserve">
    <value>複製</value>
  </data>
  <data name="CopyErrorMessage" xml:space="preserve">
    <value>複製錯誤資訊</value>
  </data>
  <data name="CopyName" xml:space="preserve">
    <value>複製完全限定名稱</value>
  </data>
  <data name="CouldNotUseSdkStyleProjectFormat" xml:space="preserve">
    <value>無法使用SDK-style專案格式， 因為發現有不相容目標框架別名</value>
  </data>
  <data name="Create" xml:space="preserve">
    <value>建立</value>
  </data>
  <data name="CultureLabel" xml:space="preserve">
    <value>區域</value>
  </data>
  <data name="DEBUGDecompile" xml:space="preserve">
    <value>除錯 -- 全部反編譯到 C#</value>
  </data>
  <data name="DEBUGDecompile100x" xml:space="preserve">
    <value>除錯 -- 反編譯100次</value>
  </data>
  <data name="DEBUGDisassemble" xml:space="preserve">
    <value>除錯 -- 全部反編譯到 IL</value>
  </data>
  <data name="DEBUGDumpPDBAsXML" xml:space="preserve">
    <value>除錯 -- PDB 轉儲為 XML</value>
  </data>
  <data name="DarkMode" xml:space="preserve">
    <value>深色</value>
  </data>
  <data name="DebugSteps" xml:space="preserve">
    <value>除錯步驟</value>
  </data>
  <data name="DebugThisStep" xml:space="preserve">
    <value>除錯此步驟</value>
  </data>
  <data name="DecompilationCompleteInF1Seconds" xml:space="preserve">
    <value>反編譯完成。耗時 {0:F1} 秒。</value>
  </data>
  <data name="Decompile" xml:space="preserve">
    <value>反編譯</value>
  </data>
  <data name="DecompileToNewPanel" xml:space="preserve">
    <value>在新視窗反編譯</value>
  </data>
  <data name="Decompiler" xml:space="preserve">
    <value>反編譯器</value>
  </data>
  <data name="DecompilerSettings.AggressiveInlining" xml:space="preserve">
    <value>如果可能，始終內聯區域性變數</value>
  </data>
  <data name="DecompilerSettings.AllowExtensionAddMethodsInCollectionInitializerExpressions" xml:space="preserve">
    <value>允許使用 Add 擴充套件方法的集合初始化器表達式</value>
  </data>
  <data name="DecompilerSettings.AllowExtensionMethodSyntaxOnRef" xml:space="preserve">
    <value>使用 ref 擴充套件方法</value>
  </data>
  <data name="DecompilerSettings.AlwaysCastTargetsOfExplicitInterfaceImplementationCalls" xml:space="preserve">
    <value>始終強制轉換顯式介面實現呼叫的目標</value>
  </data>
  <data name="DecompilerSettings.AlwaysQualifyMemberReferences" xml:space="preserve">
    <value>始終限定成員引用</value>
  </data>
  <data name="DecompilerSettings.AlwaysShowEnumMemberValues" xml:space="preserve">
    <value>始終顯示列舉數值</value>
  </data>
  <data name="DecompilerSettings.AlwaysUseBraces" xml:space="preserve">
    <value>始終使用大括號</value>
  </data>
  <data name="DecompilerSettings.ApplyWindowsRuntimeProjectionsOnLoadedAssemblies" xml:space="preserve">
    <value>在已載入的程式集上應用 Windows 執行時投影</value>
  </data>
  <data name="DecompilerSettings.ArrayInitializerExpressions" xml:space="preserve">
    <value>陣列初始化器表達式</value>
  </data>
  <data name="DecompilerSettings.AsyncEnumerator" xml:space="preserve">
    <value>反編譯非同步 IAsyncEnumerator 方法</value>
  </data>
  <data name="DecompilerSettings.DecompileAnonymousMethodsLambdas" xml:space="preserve">
    <value>反編譯匿名方法或 lambda</value>
  </data>
  <data name="DecompilerSettings.DecompileAnonymousTypes" xml:space="preserve">
    <value>反編譯匿名型別</value>
  </data>
  <data name="DecompilerSettings.DecompileAsyncMethods" xml:space="preserve">
    <value>反編譯非同步方法</value>
  </data>
  <data name="DecompilerSettings.DecompileAutomaticEvents" xml:space="preserve">
    <value>反編譯自動事件</value>
  </data>
  <data name="DecompilerSettings.DecompileAutomaticProperties" xml:space="preserve">
    <value>反編譯自動屬性</value>
  </data>
  <data name="DecompilerSettings.DecompileAwaitInCatchFinallyBlocks" xml:space="preserve">
    <value>反編譯 catch/finally 內的 await</value>
  </data>
  <data name="DecompilerSettings.DecompileC10PublicUnsafeFixedIntArr10Members" xml:space="preserve">
    <value>反編譯 C# 1.0「public unsafe fixed int arr[10];」成員</value>
  </data>
  <data name="DecompilerSettings.DecompileDecimalConstantAsSimpleLiteralValues" xml:space="preserve">
    <value>反編譯 [DecimalConstant(...)] 作為簡單的字面值</value>
  </data>
  <data name="DecompilerSettings.DecompileEnumeratorsYieldReturn" xml:space="preserve">
    <value>反編譯列舉器(yield return)</value>
  </data>
  <data name="DecompilerSettings.DecompileExpressionTrees" xml:space="preserve">
    <value>反編譯表達樹</value>
  </data>
  <data name="DecompilerSettings.DecompileForEachWithGetEnumeratorExtension" xml:space="preserve">
    <value>反編譯使用 GetEnumerator 擴充套件方法的 foreach 語句</value>
  </data>
  <data name="DecompilerSettings.DecompileUseOfTheDynamicType" xml:space="preserve">
    <value>反編譯 dynamic 型別</value>
  </data>
  <data name="DecompilerSettings.Deconstruction" xml:space="preserve">
    <value>檢測解構賦值</value>
  </data>
  <data name="DecompilerSettings.DetectAsyncUsingAndForeachStatements" xml:space="preserve">
    <value>檢測使用了 await 的 using 和 foreach 塊</value>
  </data>
  <data name="DecompilerSettings.DetectForeachStatements" xml:space="preserve">
    <value>檢測 foreach 語句</value>
  </data>
  <data name="DecompilerSettings.DetectLockStatements" xml:space="preserve">
    <value>檢測 lock 語句</value>
  </data>
  <data name="DecompilerSettings.DetectSwitchOnString" xml:space="preserve">
    <value>檢測字串 switch 語句</value>
  </data>
  <data name="DecompilerSettings.DetectTupleComparisons" xml:space="preserve">
    <value>檢測 Tuple 比較</value>
  </data>
  <data name="DecompilerSettings.DetectUsingStatements" xml:space="preserve">
    <value>檢測 using 語句</value>
  </data>
  <data name="DecompilerSettings.DictionaryInitializerExpressions" xml:space="preserve">
    <value>Dictionary 初始值設定項表達式</value>
  </data>
  <data name="DecompilerSettings.DoWhileStatement" xml:space="preserve">
    <value>如果可能，轉換到 do-while 塊</value>
  </data>
  <data name="DecompilerSettings.FSpecificOptions" xml:space="preserve">
    <value>F# 特定選項</value>
  </data>
  <data name="DecompilerSettings.ForStatement" xml:space="preserve">
    <value>如果可能，轉換成 For Statement</value>
  </data>
  <data name="DecompilerSettings.FunctionPointers" xml:space="preserve">
    <value>函式指標</value>
  </data>
  <data name="DecompilerSettings.GetterOnlyAutomaticProperties" xml:space="preserve">
    <value>反編譯 getter-only 自動屬性</value>
  </data>
  <data name="DecompilerSettings.IncludeXMLDocumentationCommentsInTheDecompiledCode" xml:space="preserve">
    <value>在反編譯程式碼中包括 XML 文件註釋</value>
  </data>
  <data name="DecompilerSettings.InitAccessors" xml:space="preserve">
    <value>允許 init; 訪問器</value>
  </data>
  <data name="DecompilerSettings.InsertUsingDeclarations" xml:space="preserve">
    <value>插入 using 聲明</value>
  </data>
  <data name="DecompilerSettings.IntroduceLocalFunctions" xml:space="preserve">
    <value>引入區域性函式(local functions)</value>
  </data>
  <data name="DecompilerSettings.IntroduceStaticLocalFunctions" xml:space="preserve">
    <value>引入靜態區域性函式(static local functions)</value>
  </data>
  <data name="DecompilerSettings.IsByRefLikeAttributeShouldBeReplacedWithRefModifiersOnStructs" xml:space="preserve">
    <value>IsByRefLikeAttribute 應替換為結構上的 ref 修飾符</value>
  </data>
  <data name="DecompilerSettings.IsReadOnlyAttributeShouldBeReplacedWithReadonlyInModifiersOnStructsParameters" xml:space="preserve">
    <value>IsReadOnlyAttribute 應替為結構參數上的 readonly/in 中的修飾符</value>
  </data>
  <data name="DecompilerSettings.IsUnmanagedAttributeOnTypeParametersShouldBeReplacedWithUnmanagedConstraints" xml:space="preserve">
    <value>型別參數上的 IsUnmanagedAttribute 應替換為 unmanaged 約束</value>
  </data>
  <data name="DecompilerSettings.NativeIntegers" xml:space="preserve">
    <value>使用 nint/nuint 型別</value>
  </data>
  <data name="DecompilerSettings.NullPropagation" xml:space="preserve">
    <value>反編譯 ?. 和  ?[] 運算子</value>
  </data>
  <data name="DecompilerSettings.NullableReferenceTypes" xml:space="preserve">
    <value>可空引用型別</value>
  </data>
  <data name="DecompilerSettings.ObjectCollectionInitializerExpressions" xml:space="preserve">
    <value>對像或集合初始化器表達式</value>
  </data>
  <data name="DecompilerSettings.Other" xml:space="preserve">
    <value>其他</value>
  </data>
  <data name="DecompilerSettings.Ranges" xml:space="preserve">
    <value>範圍(ranges)</value>
  </data>
  <data name="DecompilerSettings.ReadOnlyMethods" xml:space="preserve">
    <value>只讀方法</value>
  </data>
  <data name="DecompilerSettings.RecordClasses" xml:space="preserve">
    <value>記錄</value>
  </data>
  <data name="DecompilerSettings.RemoveDeadAndSideEffectFreeCodeUseWithCaution" xml:space="preserve">
    <value>刪除死程式碼和無副作用的程式碼(請謹慎使用)</value>
  </data>
  <data name="DecompilerSettings.RemoveDeadStores" xml:space="preserve">
    <value>刪除死值(請謹慎使用)</value>
  </data>
  <data name="DecompilerSettings.RemoveOptionalArgumentsIfPossible" xml:space="preserve">
    <value>如果可能，刪除可選參數</value>
  </data>
  <data name="DecompilerSettings.SeparateLocalVariableDeclarations" xml:space="preserve">
    <value>如果可能，分離區域性變數的聲明與初始化（int x = 5; -&gt; int x; x = 5;）</value>
  </data>
  <data name="DecompilerSettings.ShowInfoFromDebugSymbolsIfAvailable" xml:space="preserve">
    <value>顯示除錯符號中的資訊(如果可用)</value>
  </data>
  <data name="DecompilerSettings.SparseIntegerSwitch" xml:space="preserve">
    <value>檢測整型 switch 即使 IL 程式碼不使用跳轉表</value>
  </data>
  <data name="DecompilerSettings.StringConcat" xml:space="preserve">
    <value>反編譯 'string.Concat(a, b)' 呼叫為 'a + b'</value>
  </data>
  <data name="DecompilerSettings.SwitchExpressions" xml:space="preserve">
    <value>switch 表達式</value>
  </data>
  <data name="DecompilerSettings.UseDiscards" xml:space="preserve">
    <value>使用 Discards 符號</value>
  </data>
  <data name="DecompilerSettings.UseEnhancedUsing" xml:space="preserve">
    <value>使用增強的 using 變數聲明</value>
  </data>
  <data name="DecompilerSettings.UseExpressionBodiedMemberSyntaxForGetOnlyProperties" xml:space="preserve">
    <value>對僅有 getter 訪問器的屬性使用 Expression-bodied 成員語法</value>
  </data>
  <data name="DecompilerSettings.UseExtensionMethodSyntax" xml:space="preserve">
    <value>使用擴充套件方法語法</value>
  </data>
  <data name="DecompilerSettings.UseImplicitConversionsBetweenTupleTypes" xml:space="preserve">
    <value>在 Tuple 型別之間使用隱式轉換</value>
  </data>
  <data name="DecompilerSettings.UseImplicitMethodGroupConversions" xml:space="preserve">
    <value>使用隱式方法組轉換</value>
  </data>
  <data name="DecompilerSettings.UseLINQExpressionSyntax" xml:space="preserve">
    <value>使用 LINQ 表達式語法</value>
  </data>
  <data name="DecompilerSettings.UseLambdaSyntaxIfPossible" xml:space="preserve">
    <value>如果可能, 請使用 lambda 語法</value>
  </data>
  <data name="DecompilerSettings.UseLiftedOperatorsForNullables" xml:space="preserve">
    <value>對可為空型別使用提升運算子</value>
  </data>
  <data name="DecompilerSettings.UseNamedArguments" xml:space="preserve">
    <value>使用命名參數</value>
  </data>
  <data name="DecompilerSettings.UseNonTrailingNamedArguments" xml:space="preserve">
    <value>使用非尾隨命名參數</value>
  </data>
  <data name="DecompilerSettings.UseOutVariableDeclarations" xml:space="preserve">
    <value>使用 out 變數聲明</value>
  </data>
  <data name="DecompilerSettings.UsePatternBasedFixedStatement" xml:space="preserve">
    <value>使用基於模式的 fixed 語句</value>
  </data>
  <data name="DecompilerSettings.UsePrimaryConstructorSyntax" xml:space="preserve">
    <value>使用帶有記錄的主構造器語法</value>
  </data>
  <data name="DecompilerSettings.UseRefLocalsForAccurateOrderOfEvaluation" xml:space="preserve">
    <value>使用 ref 區域性變數以準確表達求值順序</value>
  </data>
  <data name="DecompilerSettings.UseSdkStyleProjectFormat" xml:space="preserve">
    <value>使用新的 SDK 樣式(*.csproj)產生專案檔案</value>
  </data>
  <data name="DecompilerSettings.UseStackallocInitializerSyntax" xml:space="preserve">
    <value>使用 stackalloc 初始化器語法</value>
  </data>
  <data name="DecompilerSettings.UseStringInterpolation" xml:space="preserve">
    <value>使用字串內插</value>
  </data>
  <data name="DecompilerSettings.UseThrowExpressions" xml:space="preserve">
    <value>使用 throw 表達式</value>
  </data>
  <data name="DecompilerSettings.UseTupleTypeSyntax" xml:space="preserve">
    <value>使用 Tuple 型別語法</value>
  </data>
  <data name="DecompilerSettings.UseVariableNamesFromDebugSymbolsIfAvailable" xml:space="preserve">
    <value>使用除錯符號中的變數名(如果可用)</value>
  </data>
  <data name="DecompilerSettings.VBSpecificOptions" xml:space="preserve">
    <value>VB 特定選項</value>
  </data>
  <data name="DecompilerSettings.WithExpressions" xml:space="preserve">
    <value>'with' 初始化器表達式</value>
  </data>
  <data name="DecompilerSettingsPanelLongText" xml:space="preserve">
    <value>下面選擇的設定將與語言下拉選單中的選擇一起應用於反編譯程式輸出。在下拉選單中選擇較低的語言版本將停用較高版本的所有選定選項。請注意, 某些設定隱式依賴於彼此, 例如: 如果不首先將靜態呼叫轉換為擴充套件方法呼叫, 則無法引入 LINQ 表達式。</value>
  </data>
  <data name="Decompiling" xml:space="preserve">
    <value>正在反編譯...</value>
  </data>
  <data name="Dependencies" xml:space="preserve">
    <value>參考(_L)</value>
  </data>
  <data name="DerivedTypes" xml:space="preserve">
    <value>衍生型別</value>
  </data>
  <data name="Display" xml:space="preserve">
    <value>顯示</value>
  </data>
  <data name="DisplayCode" xml:space="preserve">
    <value>顯示程式碼</value>
  </data>
  <data name="DisplaySettingsPanel_Font" xml:space="preserve">
    <value>字型:</value>
  </data>
  <data name="Download" xml:space="preserve">
    <value>下載</value>
  </data>
  <data name="E_xit" xml:space="preserve">
    <value>退出(_X)</value>
  </data>
  <data name="Editor" xml:space="preserve">
    <value>編輯器</value>
  </data>
  <data name="EnableFoldingBlocksBraces" xml:space="preserve">
    <value>在大括號中的所有塊上啟用摺疊</value>
  </data>
  <data name="EnableWordWrap" xml:space="preserve">
    <value>啟用自動換行</value>
  </data>
  <data name="EnterListName" xml:space="preserve">
    <value>輸入清單名稱：</value>
  </data>
  <data name="Exit" xml:space="preserve">
    <value>退出</value>
  </data>
  <data name="ExpandMemberDefinitionsAfterDecompilation" xml:space="preserve">
    <value>在反編譯后展開成員定義</value>
  </data>
  <data name="ExpandUsingDeclarationsAfterDecompilation" xml:space="preserve">
    <value>反編譯后展開引用和聲明</value>
  </data>
  <data name="Folding" xml:space="preserve">
    <value>摺疊</value>
  </data>
  <data name="Font" xml:space="preserve">
    <value>字型</value>
  </data>
  <data name="Forward" xml:space="preserve">
    <value>前進</value>
  </data>
  <data name="GeneratePortable" xml:space="preserve">
    <value>產生 Portable PDB</value>
  </data>
  <data name="GenerationCompleteInSeconds" xml:space="preserve">
    <value>產生完成，耗時 {0} 秒。</value>
  </data>
  <data name="GenerationWasCancelled" xml:space="preserve">
    <value>已取消產生。</value>
  </data>
  <data name="GoToToken" xml:space="preserve">
    <value>轉至Token</value>
  </data>
  <data name="HideEmptyMetadataTables" xml:space="preserve">
    <value>在樹檢視中隱藏空的後設資料表</value>
  </data>
  <data name="HighlightCurrentLine" xml:space="preserve">
    <value>高亮目前行</value>
  </data>
  <data name="HighlightMatchingBraces" xml:space="preserve">
    <value>高亮配對的大括號</value>
  </data>
  <data name="ILSpyAboutPageTxt" xml:space="preserve">
    <value>ILSpyAboutPage_zh_Hant.txt</value>
  </data>
  <data name="ILSpyVersion" xml:space="preserve">
    <value>ILSpy 版本 </value>
  </data>
  <data name="ILSpyVersionAvailable" xml:space="preserve">
    <value>有新的 ILSpy 版本已經可用。</value>
  </data>
  <data name="IndentSize" xml:space="preserve">
    <value>縮排長度：</value>
  </data>
  <data name="Indentation" xml:space="preserve">
    <value>縮排</value>
  </data>
  <data name="InsertUsingDeclarations" xml:space="preserve">
    <value>插入使用聲明</value>
  </data>
  <data name="ListDeleteConfirmation" xml:space="preserve">
    <value>是否刪除選中的類別庫清單？</value>
  </data>
  <data name="ListExistsAlready" xml:space="preserve">
    <value>已有同名的清單。</value>
  </data>
  <data name="ListsResetConfirmation" xml:space="preserve">
    <value>是否刪除所有類別庫清單，並重建預設類別庫清單？</value>
  </data>
  <data name="LoadAssembliesThatWereLoadedInTheLastInstance" xml:space="preserve">
    <value>載入在最後一個實例中載入的程式集。</value>
  </data>
  <data name="Loading" xml:space="preserve">
    <value>載入中...</value>
  </data>
  <data name="Location" xml:space="preserve">
    <value>位置</value>
  </data>
  <data name="ManageAssemblyLists" xml:space="preserve">
    <value>管理類別庫清單</value>
  </data>
  <data name="ManageAssembly_Lists" xml:space="preserve">
    <value>管理類別庫清單(_L)...</value>
  </data>
  <data name="Misc" xml:space="preserve">
    <value>雜項</value>
  </data>
  <data name="NETFrameworkVersion" xml:space="preserve">
    <value>.Net 版本</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>名稱</value>
  </data>
  <data name="Navigation" xml:space="preserve">
    <value>導航</value>
  </data>
  <data name="NavigationFailed" xml:space="preserve">
    <value>導航失敗，因為目標是隱藏的或編譯器產生的類。\n
請禁用所有的、可能隱藏它們的篩選器(例如，啟用「檢視 &gt; 顯示內部型別和成員」)，並重試。</value>
  </data>
  <data name="NewList" xml:space="preserve">
    <value>新建清單</value>
  </data>
  <data name="NewTab" xml:space="preserve">
    <value>新視窗</value>
  </data>
  <data name="NugetPackageBrowser" xml:space="preserve">
    <value>Nuget 包瀏覽器</value>
  </data>
  <data name="OK" xml:space="preserve">
    <value>確定</value>
  </data>
  <data name="Open" xml:space="preserve">
    <value>打開</value>
  </data>
  <data name="OpenExplorer" xml:space="preserve">
    <value>打開資源管理器</value>
  </data>
  <data name="OpenFrom" xml:space="preserve">
    <value>從 GAC 中打開</value>
  </data>
  <data name="OpenFrom_GAC" xml:space="preserve">
    <value>從 GAC 中打開(_G)...</value>
  </data>
  <data name="OpenListDialog__Delete" xml:space="preserve">
    <value>刪除(_D)</value>
  </data>
  <data name="OpenListDialog__Open" xml:space="preserve">
    <value>打開(_O)</value>
  </data>
  <data name="Options" xml:space="preserve">
    <value>選項</value>
  </data>
  <data name="Other" xml:space="preserve">
    <value>其他</value>
  </data>
  <data name="OtherOptions" xml:space="preserve">
    <value>其他選項</value>
  </data>
  <data name="OtherResources" xml:space="preserve">
    <value>其他資源</value>
  </data>
  <data name="PortablePDBPdbAllFiles" xml:space="preserve">
    <value>Portable PDB(*.pdb)|*.pdb|所有檔案(*.*)|*.*</value>
  </data>
  <data name="ProjectExportFormatChangeSettingHint" xml:space="preserve">
    <value>你可以切換 選項 &gt; 反編譯器 &gt; 其他 &gt; 使用新的 SDK 樣式(*.csproj)產生專案檔案 設定以改變專案格式。</value>
  </data>
  <data name="ProjectExportFormatNonSDKHint" xml:space="preserve">
    <value>已產生非 SDK 樣式專案。 訪問 https://docs.microsoft.com/zh-cn//nuget/resources/check-project-format 瞭解更多。</value>
  </data>
  <data name="ProjectExportFormatSDKHint" xml:space="preserve">
    <value>已產生 SDK 樣式專案。 訪問 https://docs.microsoft.com/zh-cn//nuget/resources/check-project-format 瞭解更多。</value>
  </data>
  <data name="PropertyManuallyMissingReferencesListLoadedAssemblies" xml:space="preserve">
    <value>例如屬性 getter/setter 訪問。要獲得最佳反編譯結果，請手動將缺少的引用新增到載入的類別庫清單中。</value>
  </data>
  <data name="PublicToken" xml:space="preserve">
    <value>公鑰標記</value>
  </data>
  <data name="R_ename" xml:space="preserve">
    <value>重新命名(_E)</value>
  </data>
  <data name="ReferenceName" xml:space="preserve">
    <value>引用名稱</value>
  </data>
  <data name="References" xml:space="preserve">
    <value>引用</value>
  </data>
  <data name="RefreshCommand_ReloadAssemblies" xml:space="preserve">
    <value>重新載入程式集</value>
  </data>
  <data name="ReloadAssemblies" xml:space="preserve">
    <value>重新載入全部程式集</value>
  </data>
  <data name="Remove" xml:space="preserve">
    <value>移除</value>
  </data>
  <data name="RemoveDeadSideEffectFreeCode" xml:space="preserve">
    <value>刪除死程式碼和無副作用的程式碼</value>
  </data>
  <data name="RemoveShellIntegration" xml:space="preserve">
    <value>移除檔案資源管理器整合</value>
  </data>
  <data name="RemoveShellIntegrationMessage" xml:space="preserve">
    <value>這會在註冊表的「HKCU\Software\Classes\dllfile\shell\Open with ILSpy\command」與「HKCU\Software\Classes\exefile\shell\Open with ILSpy\command」中移除「{0}」。

確定繼續？</value>
  </data>
  <data name="RenameList" xml:space="preserve">
    <value>重新命名清單</value>
  </data>
  <data name="ResetToDefaults" xml:space="preserve">
    <value>還原到預設值</value>
  </data>
  <data name="ResetToDefaultsConfirmationMessage" xml:space="preserve">
    <value>是否為活動頁面載入預設值？</value>
  </data>
  <data name="ResourcesFileFilter" xml:space="preserve">
    <value>資原始檔|*.resources|XML資原始檔|*.resx</value>
  </data>
  <data name="Save" xml:space="preserve">
    <value>儲存</value>
  </data>
  <data name="SaveCode" xml:space="preserve">
    <value>儲存程式碼</value>
  </data>
  <data name="Search" xml:space="preserve">
    <value>搜索...</value>
  </data>
  <data name="SearchAbortedMoreThan1000ResultsFound" xml:space="preserve">
    <value>搜索已中止，發現超過1000個結果。</value>
  </data>
  <data name="SearchCtrlShiftFOrCtrlE" xml:space="preserve">
    <value>搜索(Ctrl + Shift + F 或 Ctrl + E)</value>
  </data>
  <data name="SearchMSDN" xml:space="preserve">
    <value>搜索 Microsoft Docs...</value>
  </data>
  <data name="SearchPane_Search" xml:space="preserve">
    <value>搜索</value>
  </data>
  <data name="Searching" xml:space="preserve">
    <value>搜索...</value>
  </data>
  <data name="Select" xml:space="preserve">
    <value>全部選擇</value>
  </data>
  <data name="SelectAssembliesOpen" xml:space="preserve">
    <value>選擇要打開的程式集：</value>
  </data>
  <data name="SelectAssemblyListDropdownTooltip" xml:space="preserve">
    <value>選擇一個類別庫清單</value>
  </data>
  <data name="SelectLanguageDropdownTooltip" xml:space="preserve">
    <value>選擇一個反編譯目標語言</value>
  </data>
  <data name="SelectList" xml:space="preserve">
    <value>選擇一個清單：</value>
  </data>
  <data name="SelectPDB" xml:space="preserve">
    <value>選擇 PDB...</value>
  </data>
  <data name="SelectVersionDropdownTooltip" xml:space="preserve">
    <value>選擇輸出語言的版本</value>
  </data>
  <data name="SettingsChangeRestartRequired" xml:space="preserve">
    <value>你必須重啟ILSpy才能使得更改生效。</value>
  </data>
  <data name="Shell" xml:space="preserve">
    <value>Shell</value>
  </data>
  <data name="ShowAllTypesAndMembers" xml:space="preserve">
    <value>顯示所有型別和成員</value>
  </data>
  <data name="ShowAssemblyLoad" xml:space="preserve">
    <value>顯示程式集載入日誌</value>
  </data>
  <data name="ShowChildIndexInBlock" xml:space="preserve">
    <value>在塊中顯示子索引</value>
  </data>
  <data name="ShowDocumentationDecompiledCode" xml:space="preserve">
    <value>在反編譯程式碼中顯示 XML 文件</value>
  </data>
  <data name="ShowILRanges" xml:space="preserve">
    <value>顯示 IL 範圍</value>
  </data>
  <data name="ShowInfoFromDebugSymbolsAvailable" xml:space="preserve">
    <value>顯示除錯符號的資訊(如果可用)</value>
  </data>
  <data name="ShowInternalTypesMembers" xml:space="preserve">
    <value>顯示內部型別和成員</value>
  </data>
  <data name="ShowLineNumbers" xml:space="preserve">
    <value>顯示行號</value>
  </data>
  <data name="ShowMetadataTokens" xml:space="preserve">
    <value>顯示後設資料標記</value>
  </data>
  <data name="ShowMetadataTokensInBase10" xml:space="preserve">
    <value>使用十進制顯示後設資料標記</value>
  </data>
  <data name="ShowPublicOnlyTypesMembers" xml:space="preserve">
    <value>只顯示公有型別和成員</value>
  </data>
  <data name="ShowStateAfterThisStep" xml:space="preserve">
    <value>在此步驟之後顯示狀態</value>
  </data>
  <data name="ShowStateBeforeThisStep" xml:space="preserve">
    <value>在此步驟之前顯示狀態</value>
  </data>
  <data name="Show_allTypesAndMembers" xml:space="preserve">
    <value>顯示所有型別和成員(_A)</value>
  </data>
  <data name="Show_internalTypesMembers" xml:space="preserve">
    <value>顯示內部型別和成員(_I)</value>
  </data>
  <data name="Show_publiconlyTypesMembers" xml:space="preserve">
    <value>只顯示公有型別和成員(_P)</value>
  </data>
  <data name="Size" xml:space="preserve">
    <value>大小：</value>
  </data>
  <data name="SortAssemblyListName" xml:space="preserve">
    <value>按名稱排序類別庫清單</value>
  </data>
  <data name="SortAssembly_listName" xml:space="preserve">
    <value>按名稱排序類別清單(_L)</value>
  </data>
  <data name="SortResultsFitness" xml:space="preserve">
    <value>排序結果自適應</value>
  </data>
  <data name="StandBy" xml:space="preserve">
    <value>就緒...</value>
  </data>
  <data name="Status" xml:space="preserve">
    <value>狀態</value>
  </data>
  <data name="StringTable" xml:space="preserve">
    <value>字串表</value>
  </data>
  <data name="TabSize" xml:space="preserve">
    <value>Tab 長度：</value>
  </data>
  <data name="ToggleFolding" xml:space="preserve">
    <value>切換所有摺疊</value>
  </data>
  <data name="Type" xml:space="preserve">
    <value>型別</value>
  </data>
  <data name="UILanguage" xml:space="preserve">
    <value>語言</value>
  </data>
  <data name="UILanguage_System" xml:space="preserve">
    <value>系統</value>
  </data>
  <data name="UpdateILSpyFound" xml:space="preserve">
    <value>找不到 ILSpy 的更新。</value>
  </data>
  <data name="UseFieldSugar" xml:space="preserve">
    <value>使用 fld 語法糖</value>
  </data>
  <data name="UseLogicOperationSugar" xml:space="preserve">
    <value>使用 logic 語法糖</value>
  </data>
  <data name="UseTabsInsteadOfSpaces" xml:space="preserve">
    <value>使用 Tab 替代空格</value>
  </data>
  <data name="UsingLatestRelease" xml:space="preserve">
    <value>您使用的是最新版本。</value>
  </data>
  <data name="UsingNightlyBuildNewerThanLatestRelease" xml:space="preserve">
    <value>您使用的是每日構建版本，比最新版本更新。</value>
  </data>
  <data name="Value" xml:space="preserve">
    <value>值</value>
  </data>
  <data name="ValueString" xml:space="preserve">
    <value>值(以字串形式)</value>
  </data>
  <data name="VariableNamesFromDebugSymbolsAvailable" xml:space="preserve">
    <value>使用除錯符號中的變數名稱(如果可用)</value>
  </data>
  <data name="Version" xml:space="preserve">
    <value>版本</value>
  </data>
  <data name="VersionAvailable" xml:space="preserve">
    <value>版本 {0} 已可用。</value>
  </data>
  <data name="View" xml:space="preserve">
    <value>檢視</value>
  </data>
  <data name="VisualStudioSolutionFileSlnAllFiles" xml:space="preserve">
    <value>Visual Studio 解決方案檔案(*.sln)|*.sln|所有檔案(*.*)|*.*</value>
  </data>
  <data name="WarningAsmMarkedRef" xml:space="preserve">
    <value>警告：此程式集被標記為「引用程式集」，這意味著它只包含後設資料，沒有可執行程式碼。</value>
  </data>
  <data name="WarningSomeAssemblyReference" xml:space="preserve">
    <value>警告：某些程式集引用無法自動解析。這可能會導致某些部分反編譯錯誤，</value>
  </data>
  <data name="WatermarkText" xml:space="preserve">
    <value>搜索 t:型別、m:成員 或 c:常量；使用完全匹配(=term)、不應包含(-term)或必須包含(+term)；使用 /正(則)?表達(式)?/；或同時使用二者 - t:/類(型)?/...</value>
  </data>
  <data name="Window_CloseAllDocuments" xml:space="preserve">
    <value>關閉所有文件(_C)</value>
  </data>
  <data name="Window_ResetLayout" xml:space="preserve">
    <value>重設版面(_R)</value>
  </data>
  <data name="_About" xml:space="preserve">
    <value>關於(_A)</value>
  </data>
  <data name="_AddMainList" xml:space="preserve">
    <value>新增到主清單(_A)</value>
  </data>
  <data name="_CheckUpdates" xml:space="preserve">
    <value>檢查更新(_C)</value>
  </data>
  <data name="_CollapseTreeNodes" xml:space="preserve">
    <value>摺疊所有樹節點(_C)</value>
  </data>
  <data name="_File" xml:space="preserve">
    <value>檔案(_F)</value>
  </data>
  <data name="_Help" xml:space="preserve">
    <value>說明(_H)</value>
  </data>
  <data name="_LoadDependencies" xml:space="preserve">
    <value>載入參考(_L)</value>
  </data>
  <data name="_New" xml:space="preserve">
    <value>新增(_N)</value>
  </data>
  <data name="_Open" xml:space="preserve">
    <value>開啟(_O)...</value>
  </data>
  <data name="_OpenCommandLineHere" xml:space="preserve">
    <value>在這裡開啟命令列(_O)</value>
  </data>
  <data name="_OpenContainingFolder" xml:space="preserve">
    <value>打開包含的資料夾(_O)</value>
  </data>
  <data name="_Options" xml:space="preserve">
    <value>選項(_O)...</value>
  </data>
  <data name="_Reload" xml:space="preserve">
    <value>重新載入(_R)</value>
  </data>
  <data name="_Remove" xml:space="preserve">
    <value>移除(_R)</value>
  </data>
  <data name="_RemoveAssembliesWithLoadErrors" xml:space="preserve">
    <value>移除類別庫及其載入錯誤(_R)</value>
  </data>
  <data name="_Reset" xml:space="preserve">
    <value>重置(_R)</value>
  </data>
  <data name="_Resources" xml:space="preserve">
    <value>資源</value>
  </data>
  <data name="_SaveCode" xml:space="preserve">
    <value>儲存程式碼(_S)...</value>
  </data>
  <data name="_Search" xml:space="preserve">
    <value>搜尋(_S):</value>
  </data>
  <data name="_SearchFor" xml:space="preserve">
    <value>搜尋(_S):</value>
  </data>
  <data name="_ShowDebugSteps" xml:space="preserve">
    <value>顯示除錯步驟(_S)</value>
  </data>
  <data name="_ToggleFolding" xml:space="preserve">
    <value>切換摺疊</value>
  </data>
  <data name="_View" xml:space="preserve">
    <value>檢視(_V)</value>
  </data>
  <data name="_Window" xml:space="preserve">
    <value>視窗(_W)</value>
  </data>
</root>